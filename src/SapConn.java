
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoDestinationManager;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoTable;
import com.sap.conn.jco.ext.DestinationDataProvider;
import com.sun.net.httpserver.HttpContext;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpServer;

// https://www.codeproject.com/Tips/1040097/Create-a-Simple-Web-Server-in-Java-HTTP-Server

public class SapConn {

	private static StringBuilder pas = new StringBuilder("");
	protected static String destname1 = "ABAP_AS_WITHOUT_POOL";
	protected static String destname2 = "ABAP_AS_WITH_POOL";
	protected static JCoDestination destination = null;

	public static void main(String[] args) {

		int port = 8080;
		HttpServer server = null;

		try {

			server = HttpServer.create(new InetSocketAddress(port), 0);

			HttpContext ctx1 = server.createContext("/exec", httpExchange -> {

				// Get attribute generated by ParametersFilter
				Map<String, Object> params = (Map<String, Object>) httpExchange.getAttribute("parameters");
				String pass = (String) params.get("pass");
				
				List list = getSapEmployees(pass);
				String response = createJson(list);

				sendResponse(httpExchange, response, "application/json");

			});

			// Add filter so we can get POST parameters from request
			ctx1.getFilters().add(new ParameterFilter());

			server.createContext("/", httpExchange -> {
				String response = "<form action='/exec' method='post'>" + "Pass: <input type='password' name='pass'>"
						+ "</form>";

				sendResponse(httpExchange, response, "text/html");
			});

			server.createContext("/test", httpExchange -> {
				String response = "{ 'message' : 'it works'}";
				sendResponse(httpExchange, response, "application/json");
			});

			server.setExecutor(null);
			server.start();

			System.out.println("server started at " + port);

		} catch (Exception e) {
			System.out.println("Server not started!!!");
			e.printStackTrace();
		}

	}

	private static void sendResponse(HttpExchange httpExchange, String response, String contentType) {

		if (contentType.isEmpty()) {
			contentType = "text/html";
		}

		try {

			httpExchange.getResponseHeaders().set("Content-Type", contentType + "; charset=utf-8");
			httpExchange.sendResponseHeaders(200, response.length());

			System.out.println("Debug 7");

			OutputStream os = httpExchange.getResponseBody();
			os.write(response.getBytes());
			os.close();

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private static String createJson(Object obj) {

		ObjectMapper om = new ObjectMapper();

		String res = "";

		try {
			res = om.writeValueAsString(obj).toString();
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}

		return res;
	}

	
	private static List getSapEmployees(String pass) {

		Properties connectProperties = new Properties();
		System.out.println("pass2:"+pass);

		connectProperties.setProperty(DestinationDataProvider.JCO_ASHOST, "10.225.29.13");
		connectProperties.setProperty(DestinationDataProvider.JCO_SYSNR, "00");
		connectProperties.setProperty(DestinationDataProvider.JCO_CLIENT, "110");
		connectProperties.setProperty(DestinationDataProvider.JCO_USER, "btrivic");
		// connectProperties.setProperty(DestinationDataProvider.JCO_PASSWD,
		// pas.reverse().toString());
		connectProperties.setProperty(DestinationDataProvider.JCO_PASSWD, pass);
		connectProperties.setProperty(DestinationDataProvider.JCO_LANG, "sh");
		createDataFile(destname1, "jcoDestination", connectProperties);
		// connectProperties.setProperty(DestinationDataProvider.JCO_POOL_CAPACITY,
		// "3");
		// connectProperties.setProperty(DestinationDataProvider.JCO_PEAK_LIMIT, "10");
		// createDataFile(destname2, "jcoDestination", connectProperties);

		// String serverName = "";
		// Properties servertProperties = new Properties();
		// servertProperties.setProperty(ServerDataProvider.JCO_GWHOST, "");
		// servertProperties.setProperty(ServerDataProvider.JCO_GWSERV, "");
		// servertProperties.setProperty(ServerDataProvider.JCO_PROGID, "JCO_SERVER");
		// servertProperties.setProperty(ServerDataProvider.JCO_REP_DEST,
		// "ABAP_AS_WITH_POOL");
		// servertProperties.setProperty(ServerDataProvider.JCO_CONNECTION_COUNT, "2");
		// createDataFile(serverName, "jcoServer", servertProperties);

		// JCoDestination destination;
		List<Employee> out = new ArrayList<Employee>();
		try {

			if (destination == null) {
				destination = JCoDestinationManager.getDestination(destname1);
			}
			System.out.println("Destionation instance generated...");

			// System.out.println("Attributes:");
			// System.out.println(destination.getAttributes());
			// System.out.println();

			JCoFunction function = destination.getRepository().getFunction("Z_JCO_TEST");
			if (function == null) {
				throw new RuntimeException("Z_JCO_TEST not found in SAP.");
			}
			function.getImportParameterList().setValue("PI_PARAM", "Ulaz");
			function.execute(destination);

			JCoTable tbl = function.getTableParameterList().getTable("PO_OUT");

			for (int i = 0; i < tbl.getNumRows(); i++) {
				tbl.nextRow();
				Employee e = new Employee();
				e.setName(tbl.getString(1));
				e.setBirth(tbl.getString(2));
				out.add(e);
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return out;
	}

	private static void createDataFile(String name, String suffix, Properties properties) {
		File cfg = new File(name + "." + suffix);
		cfg.delete();
		// if(!cfg.exists()){
		try {
			FileOutputStream fos = new FileOutputStream(cfg, false);
			properties.store(fos, "for tests only !");
			fos.close();
		} catch (Exception e) {
			throw new RuntimeException("Unable to create the destination file " + cfg.getName(), e);
		}
		// }
	}

}
